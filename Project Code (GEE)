/*
Project: Iona Ecological Conservation - Summer 2024
Node: Athens, Georgia
Team Members: Faith Macdonald, Wei Lun Tay, Emmanuel N. Aklie, Lukka Wolff
Date: 07/18/2024
Primary Contact: weiluntay98@gmail.com (Wei Lun Tay)
Secondary Contact: lawolff@middlebury.edu (Lukka Wolff)
---------------------------
Description: 
  Creates a Land Use Land Cover Map for 2016
  Generates Confusion Matrices and computes Accuracy Mesures
  Observation Data: Landsat 8, Sentinel-1
*/

///////////////////////////////
/// Define Static Variables ///
///////////////////////////////

// Time Scope of our Map
var StartDate = '2016-01-01';
var EndDate = '2016-12-31';

// Image Resolution
var RES = 15;

/////////////////////////////////////////////////////////////////////
/////////////////////////// Training Data ///////////////////////////
/////////////////////////////////////////////////////////////////////

// Load all the training points then name the classes
var Mop_Dra = ee.FeatureCollection("projects/ee-weiluntay98/assets/Training_points_2/Mop_Drainage_points"),
    Vach_Dra = ee.FeatureCollection("projects/ee-weiluntay98/assets/Updated_points/Vachellia_dominated_Drainage-point"),
    Mix_Dra = ee.FeatureCollection("projects/ee-weiluntay98/assets/Updated_points/Mixed_Drainage-point"),
    Dune_Bare = ee.FeatureCollection("projects/ee-weiluntay98/assets/Updated_points/Barren_dunes-point"),
    Dune_Vege = ee.FeatureCollection("projects/ee-weiluntay98/assets/Updated_points/Vegetated_Dunes-point"),
    Dune_Oases = ee.FeatureCollection("projects/ee-weiluntay98/assets/Updated_points/Oases_final-point"),
    Mount_Vege = ee.FeatureCollection("projects/ee-weiluntay98/assets/Updated_points/Vegetated_mountains-point"),
    Mount_bare = ee.FeatureCollection("projects/ee-weiluntay98/assets/Updated_points/Bare_Mountain-point"),
    Plains_Gravel = ee.FeatureCollection("projects/ee-weiluntay98/assets/Updated_points/Gravel_Plains-point"),
    Plains_grass = ee.FeatureCollection("projects/ee-weiluntay98/assets/Updated_points/Grasslands-point"),
    Plains_Mop = ee.FeatureCollection("projects/ee-weiluntay98/assets/Updated_points/Mopane_Plains-point"),
    Shrub_Mop = ee.FeatureCollection("projects/ee-weiluntay98/assets/Updated_points/Mopane_Commiphora_Shrublands-point"),
    Shrub_Vach = ee.FeatureCollection("projects/ee-weiluntay98/assets/Training_points_2/Shrub_Vach_points"),
    Marsh = ee.FeatureCollection("projects/ee-weiluntay98/assets/Updated_points/water_river_updated");

// Function to add a class property to a feature collection
function addClass(fc, classValue) {
  /* 
  Assigns a value to each FeatureCollection and gives it the 'Class' Property
  Paramaters:
    Inputs: fc(FeatureCollection), classValue(Integer)
    Returns: FeatureCollection (with updated Metadata)
  */
  return fc.map(function(feature) {
    return feature.set('Class', classValue);
  });
}

  // Assign classes to each feature collection
var    Mop_Dra = addClass(ee.FeatureCollection("projects/ee-weiluntay98/assets/Training_points_2/Mop_Drainage_points"),1);
var    Vach_Dra = addClass(ee.FeatureCollection("projects/ee-weiluntay98/assets/Updated_points/Vachellia_dominated_Drainage-point"),2);
var    Mix_Dra = addClass(ee.FeatureCollection("projects/ee-weiluntay98/assets/Updated_points/Mixed_Drainage-point"),3);
var    Dune_Bare = addClass(ee.FeatureCollection("projects/ee-weiluntay98/assets/Updated_points/Barren_dunes-point"),4);
var    Dune_Vege = addClass(ee.FeatureCollection("projects/ee-weiluntay98/assets/Updated_points/Vegetated_Dunes-point"),5);
var    Dune_Oases = addClass(ee.FeatureCollection("projects/ee-weiluntay98/assets/Updated_points/Oases_final-point"),6);
var    Mount_Vege = addClass(ee.FeatureCollection("projects/ee-weiluntay98/assets/Updated_points/Vegetated_mountains-point"),7);
var    Mount_bare = addClass(ee.FeatureCollection("projects/ee-weiluntay98/assets/Updated_points/Bare_Mountain-point"),8);
var    Plains_Gravel = addClass(ee.FeatureCollection("projects/ee-weiluntay98/assets/Updated_points/Gravel_Plains-point"),9);
var    Plains_grass = addClass(ee.FeatureCollection("projects/ee-weiluntay98/assets/Updated_points/Grasslands-point"),10);
var    Plains_Mop = addClass(ee.FeatureCollection("projects/ee-weiluntay98/assets/Updated_points/Mopane_Plains-point"),11);
var    Shrub_Mop = addClass(ee.FeatureCollection("projects/ee-weiluntay98/assets/Updated_points/Mopane_Commiphora_Shrublands-point"),12);
var    Shrub_Vach = addClass(ee.FeatureCollection("projects/ee-weiluntay98/assets/Training_points_2/Shrub_Vach_points"),13);
var    Marsh = addClass(ee.FeatureCollection("projects/ee-weiluntay98/assets/Updated_points/water_river_updated"),14);  
    
// Merge all the training data into one
var data = Dune_Bare
  .merge(Dune_Oases)
  .merge(Dune_Vege)
  .merge(Mix_Dra)
  .merge(Mop_Dra)
  .merge(Mount_bare)
  .merge(Mount_Vege)
  .merge(Plains_grass)
  .merge(Plains_Gravel)
  .merge(Shrub_Mop)
  .merge(Shrub_Vach)
  .merge(Vach_Dra)
  .merge(Marsh)
  .merge(Plains_Mop);
  
// Assign the colors for each classifications
var palette = [
 '#a231f7', // Mop_Dra (1) - Medium Purple
  '#550299', // Vach_Dra (2) - Dark Purple
  '#ff00ff', // Mix_Dra (3) - Magenta
  '#ecf081', // Dune_Bare (4) - Pale Yellow
  '#adb362', // Dune_Vege (5) - Olive Green
  '#ffffff', // Dune_Oases (6) - White
  '#3e2723', // Mount_Vege (7) - Dark Brown
  '#a28051', // Mount_Bare (8) - Tan
  '#e5ae99', // Plains_Gravel (9) - Light Pink
  '#ff4500', // Plains_Grass (10) - Orange-Red
  '#ffae42', // Plains_Mop (11) - Yellow-Orange
  '#808000', // Shrub_Mop (12) - Olive
  '#006400', // Shrub_Vach (13) - Dark Green
  '#0096ff'  // Marsh (14) - Sky Blue
];


////////////////////////////////////////////////////////////////////////////////////////
//////////// Importing and Pre-Proccessing NASA Earth Observation Data 2016 ////////////
////////////////////////////////////////////////////////////////////////////////////////

// Load the study area shapefile    
var Iona = ee.FeatureCollection("projects/ee-weiluntay98/assets/2024Sum_GA_IonaEco_StudyArea_New");

// Load Landsat 8 datasets
var landsat8 = ee.ImageCollection("LANDSAT/LC08/C02/T1_TOA");

// Load Landsat 8 datasets, filter dates and select bands
var image = landsat8.filterBounds(Iona)
                     .filterDate(StartDate, EndDate)
                     .filter(ee.Filter.lt('CLOUD_COVER', 10))
                     .median()
                     .clip(Iona);

// Load Sentinel-1 datasets
var sen1Collection = ee.ImageCollection("COPERNICUS/S1_GRD")
                        .filterBounds(Iona)
                        .filterDate(StartDate, EndDate)
                        .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
                        .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
                        .filter(ee.Filter.eq('instrumentMode', 'IW'))
                        .select(['VV', 'VH']);

// Compute the median image
var sen1 = sen1Collection.median();

//Load the DEM datasets
var dem = ee.Image("USGS/SRTMGL1_003");

// Calculate topographic variables: aspect, slope 
var aspect = ee.Terrain.aspect(dem).rename('Aspect');

var slope = ee.Terrain.slope(dem);

// Loading all the shapefiles used for distance() function   
var Dune_oases_bound = ee.FeatureCollection("projects/ee-weiluntay98/assets/Dune_Oases");
var waterways = ee.FeatureCollection("projects/ee-weiluntay98/assets/Water_Supply_Control-Rivers").filterBounds(Iona);
var rivers = ee.FeatureCollection(waterways);

//Applying distance function to Oases and River
var Dune_oases_distance = Dune_oases_bound.distance(200000,100).clip(Iona);
var iona_river_raster = rivers.distance(200000,100);

// Adding all related bands to the original image collection that will be used for analysis             
var image = image .select(['B1', 'B2', 'B3', 'B4', 'B5', 'B6', 'B7','B8']) // Selecting Landsat 8 bands
                  .addBands(aspect)
                  .addBands(slope)
                  .addBands(iona_river_raster)
                  .addBands(Dune_oases_distance)
                  .addBands(sen1)
                  .addBands(dem.select('elevation'));


// Calculate NDVI
var ndvi = image.normalizedDifference(['B5', 'B4']).rename('NDVI');


// Calculate NDWI
var ndwi = image.normalizedDifference(['B3', 'B5']).rename('NDWI');

// Calculate SAVI using B4 (Red) and B5 (NIR)
var L = 0.5;  // Soil brightness correction factor
var savi = image.expression(
  '((NIR - RED) * (1 + L)) / (NIR + RED + L)', {
    'NIR': image.select('B5'),
    'RED': image.select('B4'),
    'L': L
}).rename('SAVI');


// Add NDVI and SAVI as bands to the original image
var imageWithIndex = image.addBands(ndvi).addBands(savi).addBands(ndwi)

// Pan-sharpening process
var hsv = image.select(['B4','B3','B2'])
                .rgbToHsv()
                
print(hsv)

var sharpened = ee.Image([
                hsv.select('hue'),
                hsv.select('saturation'),
                image.select('B8')
  ]).hsvToRgb()
  

// Add pan-sharpened image as bands to the image with indices
var imageWithIndices = imageWithIndex.addBands(sharpened.rename(['sharpened_R', 'sharpened_G', 'sharpened_B']));

////////////////////////////////////////////////////////////////////
/////////////// Random Forest Machine Learning Model ///////////////
////////////////////////////////////////////////////////////////////

// Process of Random forest classifier begins here
// Overlay the training points on the image and give them random values before splitting
var withRandom = data.randomColumn('random');

// Split training data into 80/20 for training and validation
var training = withRandom.filter(ee.Filter.lt('random', 0.8)); //80% for training
var validation = withRandom.filter(ee.Filter.gte('random', 0.8)); //20% for validation

// Sample regions for 80% training
var trainingData = imageWithIndices.sampleRegions({
  collection: training,
  properties: ['Class'],
  scale: RES,
  tileScale: 16
});

// Train a random forest classifier with your specified number of decision trees
var classifier = ee.Classifier.smileRandomForest(50).train({
  features: trainingData,
  classProperty: 'Class',
  inputProperties: imageWithIndices.bandNames()
});

// Classify the image
var classified = imageWithIndices.classify(classifier);

// Print classifier details
print('Results of trained classifier', classifier.explain());

////////////////////////////////////////////////////////////////////
/////////////////////// Accuracy Assessement ///////////////////////
////////////////////////////////////////////////////////////////////

// Get a confusion matrix and overall accuracy for the training sample
var trainAccuracy = classifier.confusionMatrix();
print('Training error matrix', trainAccuracy);
var acc = ee.Number(trainAccuracy.accuracy());
print('Training overall accuracy', acc);

// Sample regions for 20% validation
var validationData = imageWithIndices.sampleRegions({
  collection: validation,
  properties: ['Class'],
  scale: RES,
  tileScale: 16
});

// Classify the validation data
var validated = validationData.classify(classifier);

// Print validation accuracy
var validatedAccuracy = validated.errorMatrix('Class', 'classification');
print('Validation error matrix', validatedAccuracy);
var validatedAcc = ee.Number(validatedAccuracy.accuracy());
print('Validation overall accuracy', validatedAcc);

// Create a chart from the validation error matrix
var chart = ui.Chart.array.values({
  array: validatedAccuracy.array(),
  axis: 0,
  xLabels: validatedAccuracy.order()
})
.setChartType('ColumnChart')
.setOptions({
  title: 'Validation Error Matrix',
  hAxis: {
    title: 'Actual Class',
    titleTextStyle: {italic: false, bold: true},
    slantedText: true,
    slantedTextAngle: 45
  },
  vAxis: {
    title: 'Predicted Class',
    titleTextStyle: {italic: false, bold: true}
  },
  colors: ['1d6b99']
});

// Print the chart to the console
print(chart);

/////////////////////////////////////////////////////////////////////
//////////////// Display and Export Classified Image ////////////////
/////////////////////////////////////////////////////////////////////

// Center our study area
Map.centerObject(Iona,8)

// Display the classified image
Map.addLayer(classified, {min: 1, max: 14, palette: palette}, 'Classified Image');

//Export image to drive
Export.image.toDrive({
  image: classified.clip(Iona),
  description: 'Classified',
  scale: RES, // Adjust the scale as needed
  region: Iona,
  crs: 'EPSG:32733',
  maxPixels: 1e13,
  folder: 'GEE_exports' 
})


